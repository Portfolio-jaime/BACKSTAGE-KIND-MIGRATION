# kube-prometheus-stack Helm Chart Values
# Configuración del stack completo de monitoreo para Backstage

# Global settings
fullnameOverride: "prometheus"

# Prometheus Operator
prometheusOperator:
  enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Prometheus Server
prometheus:
  enabled: true
  prometheusSpec:
    # Allow ServiceMonitors from any namespace
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false

    # Retention and storage
    retention: 7d
    retentionSize: "4GB"

    # Persistent storage (managed by Operator)
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
          storageClassName: standard

    # Resources
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi

    # Additional scrape configs for Backstage
    additionalScrapeConfigs:
      - job_name: 'backstage'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - backstage
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: backstage
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod

# Grafana
grafana:
  enabled: true
  adminPassword: admin123

  # Resources
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  # Persistence
  persistence:
    enabled: true
    size: 2Gi
    storageClassName: standard

  # Grafana configuration
  grafana.ini:
    server:
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/"
      serve_from_sub_path: false
      domain: grafana.kind.local

    # Security for Backstage embedding
    security:
      allow_embedding: true
      cookie_samesite: "lax"
      cookie_secure: false

    # Authentication - GitHub OAuth
    auth.github:
      enabled: true
      allow_sign_up: true
      scopes: "user:email,read:org"
      auth_url: "https://github.com/login/oauth/authorize"
      token_url: "https://github.com/login/oauth/access_token"
      api_url: "https://github.com/api/v3/user"
      allowed_organizations: "Portfolio-jaime"
      role_attribute_path: "contains(groups[*], 'Portfolio-jaime') && 'Admin' || 'Viewer'"
      # client_id y client_secret se configuran via env vars desde secret

    auth.anonymous:
      enabled: false

    auth.basic:
      enabled: true

    # Features
    panels:
      enable_alpha: true

    feature_toggles:
      enable: "publicDashboards"

  # Environment variables for GitHub OAuth
  envFromSecrets:
    - name: grafana-github-oauth
      optional: false

  # Disable default datasources (will be auto-configured by kube-prometheus-stack)
  datasources: {}

  # Default dashboards
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
        - name: 'backstage'
          orgId: 1
          folder: 'Backstage'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/backstage

  # Import dashboards via ConfigMaps
  dashboardsConfigMaps:
    backstage: "backstage-grafana-dashboard"

# AlertManager
alertmanager:
  enabled: true
  alertmanagerSpec:
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 1Gi
          storageClassName: standard

# Node Exporter
nodeExporter:
  enabled: true
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

# Kube State Metrics
kube-state-metrics:
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

# Default rules - Deshabilitar alertas para componentes que Kind no expone
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false  # ⚠️ Kind no expone etcd
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: false  # ⚠️ Kind no expone kube-proxy
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeSchedulerAlerting: false  # ⚠️ Kind no expone scheduler
    kubeSchedulerRecording: false  # ⚠️ Kind no expone scheduler
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
