apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: backstage
  labels:
    app: backstage
    component: backend
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "7007"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: backstage

      # Init container to wait for PostgreSQL
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.36
        command: ['sh', '-c']
        args:
          - |
            until nc -z psql-postgresql.backstage.svc.cluster.local 5432; do
              echo "Waiting for PostgreSQL..."
              sleep 2
            done
            echo "PostgreSQL is ready!"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

      containers:
      - name: backstage
        image: jaimehenao8126/backstage-production:v6
        imagePullPolicy: Always  # Pull latest from DockerHub

        ports:
        - name: http
          containerPort: 7007
          protocol: TCP

        # Environment variables
        envFrom:
        - configMapRef:
            name: backstage-env-config
        - secretRef:
            name: backstage-secrets

        # Resource limits
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

        # Startup probe (gives app time to start)
        startupProbe:
          httpGet:
            path: /healthcheck
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12  # 2 minutes total

        # Liveness probe
        livenessProbe:
          httpGet:
            path: /healthcheck
            port: http
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

        # Readiness probe
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL

        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-tmp
          mountPath: /app/tmp

      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: app-tmp
        emptyDir:
          sizeLimit: 1Gi

      # Security context for pod
      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # Anti-affinity to spread pods
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - backstage
              topologyKey: kubernetes.io/hostname
